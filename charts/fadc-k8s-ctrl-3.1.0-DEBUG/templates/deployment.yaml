{{- if and (not .Values.webhook.useCertManager) (not .Values.webhook.tlsSecretName) }}
{{- fail "If webhook.useCertManager is false, you must provide webhook.tlsSecretName to use an existing Secret." }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fadc-k8s-ctrl.fullname" . }}
  labels:
    {{- include "fadc-k8s-ctrl.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "fadc-k8s-ctrl.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "fadc-k8s-ctrl.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-cert
          image: busybox
          command:
            - /bin/sh
            - -c
            - |
              echo "[init] Waiting for /certs/tls.crt to be ready..."
              while [ ! -f /certs/tls.crt ]; do sleep 1; done
              echo "[init] TLS cert ready."
          volumeMounts:
            - name: tls
              mountPath: /certs
              readOnly: true
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- if eq .Values.parameters.openshiftRouteSupport "no" }}
            runAsUser: 999
            {{- end }}
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.webhook.service.targetPort }}
          volumeMounts:
            - name: tls
              mountPath: /certs
              readOnly: true
          env:
          - name: VirtualServerNatSrcPool
            value: {{ .Values.parameters.virtualServerNatSrcPool }}
          - name: VirtualServerWafProfile
            value: {{ .Values.parameters.virtualServerWafProfile }}
          - name: VirtualServerAvProfile
            value: {{ .Values.parameters.virtualServerAvProfile }}
          - name: VirtualServerDosProfile
            value: {{ .Values.parameters.virtualServerDosProfile }}
          - name: VirtualServerCaptchaProfile
            value: {{ .Values.parameters.virtualServerCaptchaProfile }}
          - name: VirtualServerPersistence
            value: {{ .Values.parameters.virtualServerPersistence }}
          - name: VirtualServerFortiGSLB
            value: {{ .Values.parameters.virtualServerFortiGSLB }}
          - name: OpenShiftRouteSupport
            value: "{{ .Values.parameters.openshiftRouteSupport }}"
          - name: EnableStaticRouteSupport
            value: "{{ .Values.parameters.enableStaticRouteSupport }}"
      volumes:
        - name: tls
          secret:
            secretName: {{ .Values.webhook.tlsSecretName }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
